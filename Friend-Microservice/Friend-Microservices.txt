/geRegisterPhoneNors/{phoneNor}

/friend/registerFriend

http://localhost:4003/Microservices/geRegisterPhoneNors/{phoneNor}
http://localhost:4003/Microservices/geRegisterPhoneNors/9492011956
http://saigiri:4003/Microservices/friend/registerFriend

{
    "id": 111,
    "phoneNor": 9492011956,
    "friendNor": 987654321
}





>>28-11-2019:-

Spring Cloud Config Server:

-->In the development of an application, We create some n number of microservices and that microservices have some common properties...
-->When ever some changes are required to application.properties that you have to update all microservices involved in project...
-->Solution is spring cloud config server.,To manage common application properties of microservices in a git-repo & config server application
   will load them from git...
-->Make the microservices as config clints So.,that they can read common properties from config server...

Steps:-
1>Git account(github.com) vct...
2>Login,Create repo,Create new file application.properties and add common properties then commit...
3>Create new boot project for config server...

Note:-
*Once config server is started we can access common properties loaded from Git...Thru below url
          http://localhost:1111/ConfigServer/application-default.properties


Spring Cloud Config clints:

-->To load common application properties from config server..,At that time of before application context is created...
   Mean by before context is created all common properties loaded from config server...

Steps:-
1>Add cloud dependancy,management,repository in pom.xml of maven project...
2>Add Config Clint and Actuator dependencies...
3>Remove all common application properties in application.properties..,If keep it no problem but more preority get bootstrap.properties file...
4>Create a new file bootstrap.properties for load common application properties from config server....
5>Enable Actuator endpoints...
6>Add SpringbootApplication class on top of class @RefreshScope...

Note:-
*When properties change in Git it is automatically updated in config server but not microservices(config clints)...
*To load or update the changes to microservices(config clints)..,
 Send a POST request thru Postman to the actuator endpoint...
          http://localhost:<port>/<context-path>/<actuator>/<refresh>    -->POST
*If spring cloud bus,RabbitSrver(Message Server),Eureka Server in real time intimate to microservice and that changes effected in microservices 1000 of microservices like this...






>>28-11-2019:-

Spring Cloud Config Server:

-->In the development of an application, We create some n number of microservices and that microservices have some common properties...
-->When ever some changes are required to application.properties that you have to update all microservices involved in project...
-->Solution is spring cloud config server.,To manage common application properties of microservices in a git-repo & config server application
   will load them from git...
-->Make the microservices as config clints So.,that they can read common properties from config server...

Steps:-
1>Git account(github.com) vct...
2>Login,Create repo,Create new file application.properties and add common properties then commit...
3>Create new boot project for config server...

Note:-
*Once config server is started we can access common properties loaded from Git...Thru below url
          http://localhost:1111/ConfigServer/application-default.properties


Spring Cloud Config clints:

-->To load common application properties from config server..,At that time of before application context is created...
   Mean by before context is created all common properties loaded from config server...

Steps:-
1>Add version,cloud dependancy,management,repository in pom.xml of maven project...
2>Add Config Clint and Actuator dependencies...
3>Remove all common application properties in application.properties..,If keep it no problem but more preority get bootstrap.properties file...
4>Create a new file bootstrap.properties for load common application properties from config server....
5>Enable Actuator endpoints...
6>Add SpringbootApplication class on top of class @RefreshScope...

Note:-
*When properties change in Git it is automatically updated in config server but not microservices(config clints)...
*To load or update the changes to microservices(config clints)..,
 Send a POST request thru Postman to the actuator endpoint...
          http://localhost:<port>/<context-path>/<actuator>/<refresh>    -->POST
*If spring cloud bus,RabbitSrver(Message Server),Eureka Server in real time intimate to microservice and that changes effected in microservices 1000 of microservices like this...







>>29-11-2019:-

Load balancing with ribbon:

http://localhost:4004/Microservices/actuator/refresh    --POST
[
    "config.client.version",
    "spring.jpa.show-sql"
]


http://localhost:4004/Microservices/viewProfle/9492011956

Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Fri Nov 29 13:10:10 IST 2019
There was an unexpected error (type=Internal Server Error, status=500).
I/O error on GET request for "http://custmicro/Microservices/geRegisterPhoneNors/9492011956": Connection refused: connect; nested exception is java.net.ConnectException: Connection refused: connect
org.springframework.web.client.ResourceAccessException: I/O error on GET request for "http://custmicro/Microservices/geRegisterPhoneNors/9492011956": Connection refused: connect; nested exception is java.net.ConnectException: Connection refused: connect
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:751)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:677)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:615)
	at com.springboot.microservices.controller.CustomerController.getViewProfile(CustomerController.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

*Refresh or Reaload then get result.., becose one instanace is running that is isuue:
http://localhost:4004/Microservices/viewProfle/9492011956

{
phoneNor: 9492011956,
name: "NAGAGIRIGOLLAPALLI",
age: 21,
planId: 111,
currentPlan: {
planId: 111,
planName: "Netflix-Basic",
tenure: "6-MONTHS"
},
friends: [
9876543211,
1234567899,
9638527411
]
}


In Eclipse
----------------------------------------------------------------------------------------
>>Multiple Instances of project...

Right click on  project
        Run As->
              Run configuration->
                   [Main] tab
                       Select Friend-Microservices
                                [Environment] tab
                                       server.port  |  9491   [Add  ] 





-------------------------------------------------------------------------------------------











